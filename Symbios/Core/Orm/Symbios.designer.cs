#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Symbios.Core.Orm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Symbios")]
	public partial class SymbiosDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppFile(Symbios.Core.Models.AppFile instance);
    partial void UpdateAppFile(Symbios.Core.Models.AppFile instance);
    partial void DeleteAppFile(Symbios.Core.Models.AppFile instance);
    partial void InsertScreenshot(Symbios.Core.Models.Screenshot instance);
    partial void UpdateScreenshot(Symbios.Core.Models.Screenshot instance);
    partial void DeleteScreenshot(Symbios.Core.Models.Screenshot instance);
    partial void InsertCategory(Symbios.Core.Models.Category instance);
    partial void UpdateCategory(Symbios.Core.Models.Category instance);
    partial void DeleteCategory(Symbios.Core.Models.Category instance);
    partial void InsertApp(Symbios.Core.Models.App instance);
    partial void UpdateApp(Symbios.Core.Models.App instance);
    partial void DeleteApp(Symbios.Core.Models.App instance);
    partial void InsertPlanet(Symbios.Core.Models.Planet instance);
    partial void UpdatePlanet(Symbios.Core.Models.Planet instance);
    partial void DeletePlanet(Symbios.Core.Models.Planet instance);
    partial void InsertUser(Symbios.Core.Models.User instance);
    partial void UpdateUser(Symbios.Core.Models.User instance);
    partial void DeleteUser(Symbios.Core.Models.User instance);
    #endregion
		
		public SymbiosDataContext() : 
				base(global::Symbios.Core.Properties.Settings.Default.SymbiosConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SymbiosDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SymbiosDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SymbiosDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SymbiosDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Symbios.Core.Models.AppFile> AppFiles
		{
			get
			{
				return this.GetTable<Symbios.Core.Models.AppFile>();
			}
		}
		
		public System.Data.Linq.Table<Symbios.Core.Models.Screenshot> Screenshots
		{
			get
			{
				return this.GetTable<Symbios.Core.Models.Screenshot>();
			}
		}
		
		public System.Data.Linq.Table<Symbios.Core.Models.Category> Categories
		{
			get
			{
				return this.GetTable<Symbios.Core.Models.Category>();
			}
		}
		
		public System.Data.Linq.Table<Symbios.Core.Models.App> Apps
		{
			get
			{
				return this.GetTable<Symbios.Core.Models.App>();
			}
		}
		
		public System.Data.Linq.Table<Symbios.Core.Models.Planet> Planets
		{
			get
			{
				return this.GetTable<Symbios.Core.Models.Planet>();
			}
		}
		
		public System.Data.Linq.Table<Symbios.Core.Models.User> Users
		{
			get
			{
				return this.GetTable<Symbios.Core.Models.User>();
			}
		}
	}
}
namespace Symbios.Core.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="dbo.AppFiles")]
	public partial class AppFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Data.Linq.Binary _FileData;
		
		private string _FileName;
		
		private EntitySet<App> _Apps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileDataChanging(System.Data.Linq.Binary value);
    partial void OnFileDataChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public AppFile()
		{
			this._Apps = new EntitySet<App>(new Action<App>(this.attach_Apps), new Action<App>(this.detach_Apps));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FileData
		{
			get
			{
				return this._FileData;
			}
			set
			{
				if ((this._FileData != value))
				{
					this.OnFileDataChanging(value);
					this.SendPropertyChanging();
					this._FileData = value;
					this.SendPropertyChanged("FileData");
					this.OnFileDataChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Association(Name="AppFile_App", Storage="_Apps", ThisKey="Id", OtherKey="FileId")]
		public EntitySet<App> Apps
		{
			get
			{
				return this._Apps;
			}
			set
			{
				this._Apps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Apps(App entity)
		{
			this.SendPropertyChanging();
			entity.AppFile = this;
		}
		
		private void detach_Apps(App entity)
		{
			this.SendPropertyChanging();
			entity.AppFile = null;
		}
	}
	
	[Table(Name="dbo.Screenshots")]
	public partial class Screenshot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Data.Linq.Binary _ImageData;
		
		private System.Data.Linq.Binary _ThumbData;
		
		private EntitySet<App> _Apps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImageDataChanging(System.Data.Linq.Binary value);
    partial void OnImageDataChanged();
    partial void OnThumbDataChanging(System.Data.Linq.Binary value);
    partial void OnThumbDataChanged();
    #endregion
		
		public Screenshot()
		{
			this._Apps = new EntitySet<App>(new Action<App>(this.attach_Apps), new Action<App>(this.detach_Apps));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ImageData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageData
		{
			get
			{
				return this._ImageData;
			}
			set
			{
				if ((this._ImageData != value))
				{
					this.OnImageDataChanging(value);
					this.SendPropertyChanging();
					this._ImageData = value;
					this.SendPropertyChanged("ImageData");
					this.OnImageDataChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ThumbData
		{
			get
			{
				return this._ThumbData;
			}
			set
			{
				if ((this._ThumbData != value))
				{
					this.OnThumbDataChanging(value);
					this.SendPropertyChanging();
					this._ThumbData = value;
					this.SendPropertyChanged("ThumbData");
					this.OnThumbDataChanged();
				}
			}
		}
		
		[Association(Name="Screenshot_App", Storage="_Apps", ThisKey="Id", OtherKey="ScreenshotId")]
		public EntitySet<App> Apps
		{
			get
			{
				return this._Apps;
			}
			set
			{
				this._Apps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Apps(App entity)
		{
			this.SendPropertyChanging();
			entity.Screenshot = this;
		}
		
		private void detach_Apps(App entity)
		{
			this.SendPropertyChanging();
			entity.Screenshot = null;
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Tag;
		
		private string _Name;
		
		private EntitySet<App> _Apps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._Apps = new EntitySet<App>(new Action<App>(this.attach_Apps), new Action<App>(this.detach_Apps));
			OnCreated();
		}
		
		[Column(Storage="_Tag", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Category_App", Storage="_Apps", ThisKey="Tag", OtherKey="CategoryTag")]
		public EntitySet<App> Apps
		{
			get
			{
				return this._Apps;
			}
			set
			{
				this._Apps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Apps(App entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Apps(App entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Apps")]
	public partial class App : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private string _Website;
		
		private string _CategoryTag;
		
		private System.Nullable<int> _ScreenshotId;
		
		private int _FileId;
		
		private System.DateTime _Created;
		
		private EntityRef<AppFile> _AppFile;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Screenshot> _Screenshot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnCategoryTagChanging(string value);
    partial void OnCategoryTagChanged();
    partial void OnScreenshotIdChanging(System.Nullable<int> value);
    partial void OnScreenshotIdChanged();
    partial void OnFileIdChanging(int value);
    partial void OnFileIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public App()
		{
			this._AppFile = default(EntityRef<AppFile>);
			this._Category = default(EntityRef<Category>);
			this._Screenshot = default(EntityRef<Screenshot>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(800)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryTag", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string CategoryTag
		{
			get
			{
				return this._CategoryTag;
			}
			set
			{
				if ((this._CategoryTag != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryTagChanging(value);
					this.SendPropertyChanging();
					this._CategoryTag = value;
					this.SendPropertyChanged("CategoryTag");
					this.OnCategoryTagChanged();
				}
			}
		}
		
		[Column(Storage="_ScreenshotId", DbType="Int")]
		public System.Nullable<int> ScreenshotId
		{
			get
			{
				return this._ScreenshotId;
			}
			set
			{
				if ((this._ScreenshotId != value))
				{
					if (this._Screenshot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScreenshotIdChanging(value);
					this.SendPropertyChanging();
					this._ScreenshotId = value;
					this.SendPropertyChanged("ScreenshotId");
					this.OnScreenshotIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileId", DbType="Int NOT NULL")]
		public int FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					if (this._AppFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Association(Name="AppFile_App", Storage="_AppFile", ThisKey="FileId", OtherKey="Id", IsForeignKey=true)]
		public AppFile AppFile
		{
			get
			{
				return this._AppFile.Entity;
			}
			set
			{
				AppFile previousValue = this._AppFile.Entity;
				if (((previousValue != value) 
							|| (this._AppFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppFile.Entity = null;
						previousValue.Apps.Remove(this);
					}
					this._AppFile.Entity = value;
					if ((value != null))
					{
						value.Apps.Add(this);
						this._FileId = value.Id;
					}
					else
					{
						this._FileId = default(int);
					}
					this.SendPropertyChanged("AppFile");
				}
			}
		}
		
		[Association(Name="Category_App", Storage="_Category", ThisKey="CategoryTag", OtherKey="Tag", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Apps.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Apps.Add(this);
						this._CategoryTag = value.Tag;
					}
					else
					{
						this._CategoryTag = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Screenshot_App", Storage="_Screenshot", ThisKey="ScreenshotId", OtherKey="Id", IsForeignKey=true)]
		public Screenshot Screenshot
		{
			get
			{
				return this._Screenshot.Entity;
			}
			set
			{
				Screenshot previousValue = this._Screenshot.Entity;
				if (((previousValue != value) 
							|| (this._Screenshot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Screenshot.Entity = null;
						previousValue.Apps.Remove(this);
					}
					this._Screenshot.Entity = value;
					if ((value != null))
					{
						value.Apps.Add(this);
						this._ScreenshotId = value.Id;
					}
					else
					{
						this._ScreenshotId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Screenshot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Planets")]
	public partial class Planet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Planet()
		{
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
